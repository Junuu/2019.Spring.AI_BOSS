#사진 전처리

import tensorflow as tf
import numpy as np

#사진 load
img= tf.keras.preprocessing.image.load_img('시계탑1.jpg')
#사진 size 확인 960x960
print("사진 size 확인", img.size)

#print(img.show) 이미지 출력해보기

#사진 size 조정
img=img.resize((150, 150),0,None)
#사진이 resize되었는지 확인 150x150
print("사진이 resize되었는지 확인",img.size)
print(img.show)

#tf.keras.preprocessing.image.img_to_array()를 이용하여 사진을 배열로 바꾼다
#150x150x3 크기의 3차원 배열이 나오게 됨
array = tf.keras.preprocessing.image.img_to_array(img)
print("3차원 배열을 확인",array.shape)

#사진 데이터를 쌓을 배열
List = np.array(array)

#앞에 np,newaxis 로 차원을 늘려주었고 ':' 표시는 별도 작업을 하지 않는다는 의미다.
#3차원 데이터를 쌓기위해 4차원의 공간이 필요
List = List[np.newaxis, :, :, :]
#차원이 늘어난 것을 확인
print("차원이 늘어난 것을 확인",List.shape)

print(List)

#반복문을 통한 여러파일에 대한 전처리
'''
for i in range(1, 200):
    string = '시계탑%d.jpg' % i
    img = tf.keras.preprocessing.image.load_img(string)
    img = img.resize((150, 150))

    array = tf.keras.preprocessing.image.img_to_array(img)
    array = array[np.newaxis, :, :, :]

    List = np.concatenate((List, array))
'''

#배열데이터를 .csv 파일로 저장할 수도 있음
#출처: https://blog.naver.com/cjsdyd2000/221233378673

#이미지를 이진화 하고싶다면 python opencv의 threshold 사용
#출처:https://webnautes.tistory.com/1254

#정규화 #min max scaler 알고리즘 xy(i)= ((xy(i)- min(xy)) / (max(xy)-min(xy)))
#필요하다면 사용
'''
from sklearn.preprocessing import MinMaxScaler
xy = np.array([[828.659973, 833.450012, 908100, 828.349976, 831.659973],
               [823.02002, 828.070007, 1828100, 821.655029, 828.070007],
               [819.929993, 824.400024, 1438100, 818.97998, 824.159973],
               [816, 820.958984, 1008100, 815.48999, 819.23999],
               [819.359985, 823, 1188100, 818.469971, 818.97998],
               [819, 823, 1198100, 816, 820.450012],
               [811.700012, 815.25, 1098100, 809.780029, 813.669983],
               [809.51001, 816.659973, 1398100, 804.539978, 809.559998]])
scaler = MinMaxScaler(feature_range=(0,1))
xy = scaler.fit_transform(xy)
print(xy)
'''





